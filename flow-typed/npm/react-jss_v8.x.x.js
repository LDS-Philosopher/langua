// flow-typed signature: 39b1de0ca274edbf5baf0fa3d927a26d
// flow-typed version: <<STUB>>/react-jss_v8.x.x/flow_v0.74.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-jss'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'react-jss' {
  declare export type Classes = { [string]: string | Classes };
  declare module.exports: any;
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'react-jss/dist/react-jss' {
  declare module.exports: any;
}

declare module 'react-jss/dist/react-jss.min' {
  declare module.exports: any;
}

declare module 'react-jss/lib/compose' {
  declare module.exports: any;
}

declare module 'react-jss/lib/compose.test' {
  declare module.exports: any;
}

declare module 'react-jss/lib/contextTypes' {
  declare module.exports: any;
}

declare module 'react-jss/lib/createHoc' {
  declare module.exports: any;
}

declare module 'react-jss/lib/getDisplayName' {
  declare module.exports: any;
}

declare module 'react-jss/lib/index' {
  declare module.exports: any;
}

declare module 'react-jss/lib/index.test' {
  declare module.exports: any;
}

declare module 'react-jss/lib/injectSheet' {
  declare module.exports: any;
}

declare module 'react-jss/lib/injectSheet.test' {
  declare module.exports: any;
}

declare module 'react-jss/lib/jss' {
  declare module.exports: any;
}

declare module 'react-jss/lib/JssProvider' {
  declare module.exports: any;
}

declare module 'react-jss/lib/JssProvider.test' {
  declare module.exports: any;
}

declare module 'react-jss/lib/ns' {
  declare module.exports: any;
}

declare module 'react-jss/lib/propTypes' {
  declare module.exports: any;
}

// Filename aliases
declare module 'react-jss/dist/react-jss.js' {
  declare module.exports: $Exports<'react-jss/dist/react-jss'>;
}
declare module 'react-jss/dist/react-jss.min.js' {
  declare module.exports: $Exports<'react-jss/dist/react-jss.min'>;
}
declare module 'react-jss/lib/compose.js' {
  declare module.exports: $Exports<'react-jss/lib/compose'>;
}
declare module 'react-jss/lib/compose.test.js' {
  declare module.exports: $Exports<'react-jss/lib/compose.test'>;
}
declare module 'react-jss/lib/contextTypes.js' {
  declare module.exports: $Exports<'react-jss/lib/contextTypes'>;
}
declare module 'react-jss/lib/createHoc.js' {
  declare module.exports: $Exports<'react-jss/lib/createHoc'>;
}
declare module 'react-jss/lib/getDisplayName.js' {
  declare module.exports: $Exports<'react-jss/lib/getDisplayName'>;
}
declare module 'react-jss/lib/index.js' {
  declare module.exports: $Exports<'react-jss/lib/index'>;
}
declare module 'react-jss/lib/index.test.js' {
  declare module.exports: $Exports<'react-jss/lib/index.test'>;
}
declare module 'react-jss/lib/injectSheet.js' {
  declare module.exports: $Exports<'react-jss/lib/injectSheet'>;
}
declare module 'react-jss/lib/injectSheet.test.js' {
  declare module.exports: $Exports<'react-jss/lib/injectSheet.test'>;
}
declare module 'react-jss/lib/jss.js' {
  declare module.exports: $Exports<'react-jss/lib/jss'>;
}
declare module 'react-jss/lib/JssProvider.js' {
  declare module.exports: $Exports<'react-jss/lib/JssProvider'>;
}
declare module 'react-jss/lib/JssProvider.test.js' {
  declare module.exports: $Exports<'react-jss/lib/JssProvider.test'>;
}
declare module 'react-jss/lib/ns.js' {
  declare module.exports: $Exports<'react-jss/lib/ns'>;
}
declare module 'react-jss/lib/propTypes.js' {
  declare module.exports: $Exports<'react-jss/lib/propTypes'>;
}

/* The typings below come from flow-typed react-jss_v7.x.x.js and need to be updated

declare module 'react-jss' {
  /*
    P = Props
    OP = OwnProps
    Def = DefaultProps
    St = State
  *//*

  declare type Null = null | void;

  declare type Dictionary = { [key: string]: {} }

  declare type StatelessComponent<P> = (props: P) =>?React$Element<any>;

  declare type ClassComponent<Def, P, St> = Class<React$Component<Def, P, St>>;

  declare class ConnectedComponent<OP, P, Def, St> extends React$Component<void, OP, void> {
    static InnerComponent: Class<React$Component<Def, P, St>>;
    static defaultProps: void;
    props: OP;
    state: void;
  }

  declare type ConnectedComponentClass<OP, P, Def, St> = Class<ConnectedComponent<OP, P, Def, St>>;

  declare type Connector<OP, P> = {
    (component: StatelessComponent<P>): ConnectedComponentClass<OP, P, void, void>;
    <Def, St>(component: ClassComponent<Def, P, St>): ConnectedComponentClass<OP, P, Def, St>;
    (component: Null): ConnectedComponentClass<OP, P, void, void>;
  };

  declare export type Classes<Styles> = { [classname: $Keys<Styles>]: string };

  declare export type Sheet<Styles> = {
    attached: boolean,
    classes: Classes<Styles>,
    deployed: boolean,
    linked: boolean,
    options: Object,
    renderer: mixed,
    rules: mixed,
  };

  declare type InjectedProps<Styles> = {
    classes: Classes<Styles>,
    sheet: Sheet<Styles>,
    theme?: Dictionary
  };

  declare type Theme = Dictionary | (parentTheme: Theme) => Dictionary

  declare type StylesCreatorFn<S> = (theme: Theme) => S

  declare export default function injectSheet<OP, Styles: Dictionary>(
    stylesOrCreator: StylesCreatorFn<Styles> | Styles
  ): Connector<OP, $Supertype<InjectedProps<Styles> & OP>>;

  // TODO: improve `JssProvider` type
  declare export class JssProvider extends React$Component<any, any, any> { }

  // TODO: improve `ThemeProvider` type
  declare export class ThemeProvider extends React$Component<any, any, any> { }

  declare export function withTheme<ThemeType, OP>(
    component: StatelessComponent<$Supertype<{ theme: ThemeType } & OP>>
  ): ConnectedComponentClass<OP, $Supertype<{ theme: ThemeType } & OP>, void, void>;

  declare export function withTheme<ThemeType, OP, Def, St>(
    component: ClassComponent<Def, $Supertype<{ theme: ThemeType } & OP>, St>
  ): ConnectedComponentClass<OP, $Supertype<{ theme: ThemeType } & OP>, Def, St>;

  declare export function createTheming(customChannel: string): {
    channel: string,
    withTheme: Function,
    ThemeProvider: ThemeProvider,
    themeListener: {},
  };
};

*/
